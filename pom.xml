<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>io.github.mohitc</groupId>
  <artifactId>linear-programming</artifactId>
  <version>${revision}</version>
  <packaging>pom</packaging>

  <!-- Project Metadata -->
  <name>${project.groupId}.${project.artifactId}</name>
  <description>
    A Kotlin/Java API to define MILP problems and provide
    interfaces to multiple commercial and open-source solvers
    to solve these problems
  </description>
  <url>https://github.com/mohitc/LPFramework</url>

  <!-- License Information -->
  <licenses>
    <license>
      <name>MIT License</name>
      <url>http://www.opensource.org/licenses/mit-license.php</url>
    </license>
  </licenses>

  <!-- Developers -->
  <developers>
    <developer>
      <name>Mohit Chamania</name>
      <email>mohitc@live.de</email>
      <organizationUrl>https://github.com/mohitc</organizationUrl>
    </developer>
  </developers>

  <!-- SCM -->
  <scm>
    <connection>scm:git:git://github.com/mohitc/LPFramework.git</connection>
    <developerConnection>scm:git:ssh://github.com:mohitc/LPFramework.git</developerConnection>
    <url>https://github.com/mohitc/LPFramework/tree/master</url>
  </scm>

  <!-- The CPLEX Solver Jar is not available in maven repositories,
  so we use profiles to control the build process to include/exclude
  that module from the build process -->
  <profiles>
    <profile>
      <id>default</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <modules>
        <module>lp-api</module>
        <module>lp-solver</module>
        <module>gurobi-solver</module>
        <module>glpk-solver</module>
        <module>glpk-ffm</module>
        <module>highs-ffm</module>
        <module>highs-solver</module>
        <module>lp-solver-sample</module>
        <module>scip-solver</module>
        <module>scip-ffm</module>
        <module>lp-rw</module>
        <module>ojalgo-solver</module>
      </modules>
    </profile>
    <profile>
      <id>cplex</id>
      <modules>
        <module>cplex-solver</module>  <!-- Only compile the Cplex solver-->
      </modules>
    </profile>
  </profiles>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <kotlin.code.style>official</kotlin.code.style>
    <kotlin.compiler.incremental>true</kotlin.compiler.incremental>
    <java.version>23</java.version>
    <kotlin.compiler.jvmTarget>${java.version}</kotlin.compiler.jvmTarget>
    <kotlin.version>2.1.21</kotlin.version>
    <logger.version>3.0.5</logger.version>
    <slf4j.version>2.0.17</slf4j.version>
    <revision>0.0.1-SNAPSHOT</revision>
    <glpk.skiptests>false</glpk.skiptests>
    <scip.skiptests>false</scip.skiptests>
    <scip-ffm.skiptests>false</scip-ffm.skiptests>
    <highs.skiptests>false</highs.skiptests>
    <highs-ffm.skiptests>false</highs-ffm.skiptests>
    <cplex.skiptests>true</cplex.skiptests>
    <gurobi.skiptests>true</gurobi.skiptests>
    <ojalgo.skiptests>false</ojalgo.skiptests>
    <ktlint.version>3.5.0</ktlint.version>
    <jacoco.version>0.8.13</jacoco.version>
    <junit.version>5.13.0</junit.version>
    <surefire.version>3.5.3</surefire.version>
    <build-helper.version>3.6.0</build-helper.version>
    <failsafe.version>3.5.3</failsafe.version>
    <mockito-kotlin.version>5.4.0</mockito-kotlin.version>
    <mockito.version>5.18.0</mockito.version>
    <maven-flatten-plugin.version>1.7.0</maven-flatten-plugin.version>
    <maven-compiler-plugin.version>3.14.0</maven-compiler-plugin.version>
    <maven-dependency-plugin.version>3.8.1</maven-dependency-plugin.version>
    <maven-source-plugin.version>3.3.1</maven-source-plugin.version>
    <maven-javadoc-plugin.version>3.11.2</maven-javadoc-plugin.version>
    <maven-central-publishing-plugin.version>0.7.0</maven-central-publishing-plugin.version>
    <jextract-maven-plugin.version>0.4.3</jextract-maven-plugin.version>
    <jextract.executable>/opt/jextract/bin/jextract</jextract.executable>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.jetbrains.kotlin</groupId>
      <artifactId>kotlin-stdlib</artifactId>
      <version>${kotlin.version}</version>
    </dependency>
    <dependency>
      <groupId>io.github.microutils</groupId>
      <artifactId>kotlin-logging-jvm</artifactId>
      <version>${logger.version}</version>
    </dependency>

    <!--Test Dependencies -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-simple</artifactId>
      <version>${slf4j.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito.kotlin</groupId>
      <artifactId>mockito-kotlin</artifactId>
      <version>${mockito-kotlin.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <version>${mockito.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <sourceDirectory>${project.basedir}/src/main/kotlin</sourceDirectory>
    <testSourceDirectory>${project.basedir}/src/test/kotlin</testSourceDirectory>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>${maven-compiler-plugin.version}</version>
        <configuration>
          <release>${java.version}</release>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.jetbrains.kotlin</groupId>
        <artifactId>kotlin-maven-plugin</artifactId>
        <version>${kotlin.version}</version>
        <configuration>
          <jvmTarget>${java.version}</jvmTarget>
        </configuration>
        <executions>
          <execution>
            <id>compile</id>
            <goals>
              <goal>compile</goal>
            </goals>
          </execution>
          <execution>
            <id>test-compile</id>
            <goals>
              <goal>test-compile</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!--Maven Flatten plugin to remove ${revision} tags in installed poms -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>flatten-maven-plugin</artifactId>
        <version>${maven-flatten-plugin.version}</version>
        <configuration>
          <updatePomFile>true</updatePomFile>
        </configuration>
        <executions>
          <execution>
            <id>flatten</id>
            <phase>process-resources</phase>
            <goals>
              <goal>flatten</goal>
            </goals>
          </execution>
          <execution>
            <id>flatten.clean</id>
            <phase>clean</phase>
            <goals>
              <goal>clean</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- Kotlin Linter. To run use mvn ktlint:format -->
      <plugin>
        <groupId>com.github.gantsign.maven</groupId>
        <artifactId>ktlint-maven-plugin</artifactId>
        <version>${ktlint.version}</version>
        <executions>
          <execution>
            <id>format-kotlin</id>
            <!-- Running it post clean to ensure that the target is run once all sources are added -->
            <phase>compile</phase>
            <goals>
              <goal>format</goal>
            </goals>
          </execution>
          <execution>
            <id>check-kotlin-style</id>
            <phase>install</phase>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- Jacoco Code coverage -->
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>${jacoco.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
          </execution>
          <!-- attached to Maven test phase -->
          <execution>
            <id>report</id>
            <phase>test</phase>
            <goals>
              <goal>report</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- Surefire plugin to run Junit tests -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${surefire.version}</version>
        <configuration>
          <argLine>@{argLine} -javaagent:${org.mockito:mockito-core:jar}</argLine>
          <!-- Excludes integration tests when unit tests are run -->
          <excludes>
            <exclude>**/IT*.*</exclude>
          </excludes>
        </configuration>
      </plugin>
      <!-- Used to explicitly reference mockito-code during the test phase -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>${maven-dependency-plugin.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>properties</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- Generate Java Sources Jar -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
        <version>${maven-source-plugin.version}</version>
        <executions>
          <execution>
            <id>attach-sources</id>
            <goals>
              <goal>jar-no-fork</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>${maven-javadoc-plugin.version}</version>
        <executions>
          <execution>
            <id>attach-javadocs</id>
            <goals>
              <goal>jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- Plugin to publish packages to maven central -->
      <plugin>
        <groupId>org.sonatype.central</groupId>
        <artifactId>central-publishing-maven-plugin</artifactId>
        <version>${maven-central-publishing-plugin.version}</version>
        <extensions>true</extensions>
        <configuration>
          <publishingServerId>central</publishingServerId>
          <excludeArtifacts>lp-solver-sample</excludeArtifacts>
        </configuration>
      </plugin>
    </plugins>
  </build>
  <distributionManagement>
    <repository>
      <id>github</id>
      <name>GitHub Packages</name>
      <url>https://maven.pkg.github.com/mohitc/LPFramework</url>
    </repository>
    <snapshotRepository>
      <id>central</id>
      <name>Maven Central - Snapshots</name>
      <url>https://central.sonatype.com/repository/maven-snapshots/</url>
    </snapshotRepository>
  </distributionManagement>
</project>
